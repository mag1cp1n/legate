#!/usr/bin/env bash

. pretty_printing.bash

# Shamelessly stolen from https://github.com/rapidsai/gha-tools/blob/main/tools/rapids-conda-retry

# legate-conda-retry
#
# wrapper for conda that retries the command after a CondaHTTPError,
# ChecksumMismatchError, or JSONDecodeError (ideally, any conda error that
# is normally resolved by retrying)
#
# This must be set in order for the script to recognize failing exit codes when
# output is piped to tee
#
# Example usage:
# $ legate-conda-retry install cudatoolkit=11.0 rapids=0.16
#
# Configurable options are set using the following env vars:
#
# LEGATE_CONDA_EXE             - override the conda executable
#                                Default is "conda"
#
# LEGATE_CONDA_RETRY_MAX       - set to a positive integer to set the max number of retry
#                                attempts (attempts after the initial try).
#                                Default is 3 retries
#
# LEGATE_CONDA_RETRY_SLEEP     - set to a positive integer to set the duration, in
#                                seconds, to wait between retries.
#                                Default is a 10 second sleep
#
# LEGATE_CONDA_RETRY_TIMEOUT   - set to a positive integer to specify the timeout in seconds
#                                for the conda command execution.
#                                Default is 600 seconds (10 minutes)
#
set -eou pipefail
export LEGATE_SCRIPT_NAME="legate-conda-retry"

# Global variables for error propagation
LEGATE_EXITCODE=0
LEGATE_NEED_TO_RETRY=0

# Default timeout: 10 minutes
LEGATE_CONDA_RETRY_TIMEOUT=${LEGATE_CONDA_RETRY_TIMEOUT:=600}

# Function to run conda and check output for specific retryable errors
# input variables:
#    conda_cmd: the command used for running conda, which accepts the args
#              passed to this script
#    outfile: file to tee output to for checking, likely a temp file
# output variables:
#    LEGATE_EXITCODE: the exit code from running ${conda_cmd} ${args}
#    LEGATE_NEED_TO_RETRY: 1 if the command should be retried, 0 if it should not be
legate_run_conda() {
  # shellcheck disable=SC2086
  # LEGATE_OTEL_WRAPPER is optionally passed in as an env var. It is
  # used to instrument conda-build or mambabuild for finer-grained spans.
  local outfile
  outfile=$(mktemp)

  # Momentarily disable error returns because the conda command might... fail
  set +e
  # shellcheck disable=SC2086
  timeout ${LEGATE_CONDA_RETRY_TIMEOUT} ${LEGATE_OTEL_WRAPPER:-} ${conda_cmd} ${args} 2>&1 | tee "${outfile}"
  LEGATE_EXITCODE=${PIPESTATUS[0]}
  set -e
  LEGATE_NEED_TO_RETRY=0
  local need_to_clean=0
  local retrying_msg=""

  if (( LEGATE_EXITCODE == 124 )); then
    retrying_msg="Retrying, conda command timed out after ${LEGATE_CONDA_RETRY_TIMEOUT} seconds..."
    LEGATE_NEED_TO_RETRY=1
  elif (( LEGATE_EXITCODE != 0 )); then
    # Show exit code
    legate-echo-stderr "conda returned exit code: ${LEGATE_EXITCODE}"

    if grep -q ChecksumMismatchError: "${outfile}"; then
      retrying_msg="Retrying, found 'ChecksumMismatchError:' in output..."
      LEGATE_NEED_TO_RETRY=1
      retrying_msg="Retrying after cleaning tarball and package caches, found 'ChecksumMismatchError:' in output..."
      LEGATE_NEED_TO_RETRY=1
      need_to_clean=1
    elif grep -q ChunkedEncodingError: "${outfile}"; then
      retrying_msg="Retrying, found 'ChunkedEncodingError:' in output..."
      LEGATE_NEED_TO_RETRY=1
    elif grep -q CondaHTTPError: "${outfile}"; then
      retrying_msg="Retrying, found 'CondaHTTPError:' in output..."
      LEGATE_NEED_TO_RETRY=1
    elif grep -q CondaMultiError: "${outfile}"; then
      retrying_msg="Retrying after cleaning tarball cache, found 'CondaMultiError:' in output..."
      LEGATE_NEED_TO_RETRY=1
      need_to_clean=1
    elif grep -q CondaSSLError: "${outfile}"; then
      retrying_msg="Retrying, found 'CondaSSLError:' in output..."
      LEGATE_NEED_TO_RETRY=1
    elif grep -q "Connection broken:" "${outfile}"; then
      retrying_msg="Retrying, found 'Connection broken:' in output..."
      LEGATE_NEED_TO_RETRY=1
    elif grep -q ConnectionError: "${outfile}"; then
      retrying_msg="Retrying, found 'ConnectionError:' in output..."
      LEGATE_NEED_TO_RETRY=1
    elif grep -q DependencyNeedsBuildingError: "${outfile}"; then
      retrying_msg="Retrying, found 'DependencyNeedsBuildingError:' in output..."
      LEGATE_NEED_TO_RETRY=1
    elif grep -q EOFError: "${outfile}"; then
      retrying_msg="Retrying, found 'EOFError:' in output..."
      LEGATE_NEED_TO_RETRY=1
    elif grep -q JSONDecodeError: "${outfile}"; then
      retrying_msg="Retrying, found 'JSONDecodeError:' in output..."
      LEGATE_NEED_TO_RETRY=1
    elif grep -q "Multi-download failed" "${outfile}"; then
      retrying_msg="Retrying, found 'Multi-download failed' in output..."
      LEGATE_NEED_TO_RETRY=1
    elif grep -q "Response ended prematurely" "${outfile}"; then
      retrying_msg="Retrying, found 'Response ended prematurely' in output..."
      LEGATE_NEED_TO_RETRY=1
    elif grep -q "Timeout was reached" "${outfile}"; then
      retrying_msg="Retrying, found 'Timeout was reached' in output..."
      LEGATE_NEED_TO_RETRY=1
    elif grep -q "Unexpected error .* on netlink descriptor" "${outfile}"; then
      retrying_msg="Retrying, found 'Unexpected error .* on netlink descriptor' in output..."
      LEGATE_NEED_TO_RETRY=1
    elif grep -q "File not valid: SHA256 sum doesn't match expectation" "${outfile}"; then
      retrying_msg="Retrying after cleaning tarball and package caches, found 'File not valid: SHA256 sum doesn't match expectation' in output..."
      LEGATE_NEED_TO_RETRY=1
      need_to_clean=1
    elif grep -q "Error when extracting package: basic_filebuf::underflow error reading the file: Bad file descriptor" "${outfile}"; then
      retrying_msg="Retrying after cleaning tarball and package caches, found 'Error when extracting package: basic_filebuf::underflow error reading the file: Bad file descriptor' in output..."
      LEGATE_NEED_TO_RETRY=1
      need_to_clean=1
    elif grep -q 'Download error.*Could not read a file' "${outfile}"; then
      retrying_msg="Retrying, found 'Download error .*Could not read a file' in output..."
      LEGATE_NEED_TO_RETRY=1
      need_to_clean=1
    elif grep -q 'Download error.*Timeout was reached' "${outfile}"; then
      retrying_msg="Retrying, found 'Download error.*Timeout was reached' in output..."
      LEGATE_NEED_TO_RETRY=1
      need_to_clean=1
    elif [[ ${LEGATE_EXITCODE} -eq 139 ]]; then
      retrying_msg="Retrying, command resulted in a segfault. This may be an intermittent failure..."
      LEGATE_NEED_TO_RETRY=1
      need_to_clean=1
    else
      legate-echo-stderr "Exiting, no retryable ${LEGATE_CONDA_EXE} errors detected"
    fi

    if (( LEGATE_NEED_TO_RETRY == 1 )) && \
         (( retries >= max_retries )); then
      # Catch instance where we run out of retries
      legate-echo-stderr "Exiting, reached max retries..."
    else
      # Give reason for retry
      legate-echo-stderr "${retrying_msg}"
      if (( need_to_clean == 1 )); then
        legate-echo-stderr "Cleaning tarball and package caches before retrying..."
        ${conda_cmd} clean --tarballs --packages -y
      fi
    fi
  fi
  rm -f "${outfile}"
}

legate_conda_retry_fn() {
  local condaretry_help="
legate-conda-retry options:

   --condaretry_max_retries=n      Retry the conda command at most n times (default is 3)
   --condaretry_sleep_interval=n   Sleep n seconds between retries (default is 5)

ALSO legate-conda-retry options can be set using the following env vars:

    LEGATE_CONDA_RETRY_MAX       - set to a positive integer to set the max number of retry
                                   attempts (attempts after the initial try).
                                   Default is 3 retries

    LEGATE_CONDA_RETRY_SLEEP     - set to a positive integer to set the duration, in
                                   seconds, to wait between retries.
                                   Default is a 10 second sleep
==========
"
  local max_retries=${LEGATE_CONDA_RETRY_MAX:=3}
  local sleep_interval=${LEGATE_CONDA_RETRY_SLEEP:=10}
  local retries=0

  # Temporarily set this to something else (eg. a script called "testConda" that
  # prints "CondaHTTPError:" and exits with 1) for testing this script.
  #conda_cmd=./testConda
  local conda_cmd="${LEGATE_CONDA_EXE:=conda}"

  # Process and remove args recognized only by this script, save others for conda
  # Process help separately
  local args=""

  for arg in "$@"; do
    local opt=${arg%%=*}
    local val=${arg##*=}
    if [[ ${opt} == "--help" ]] || [[ ${opt} == "-h" ]]; then
      echo "${condaretry_help}"
      ${conda_cmd} --help
      exit $?
    elif [[ ${opt} == "--condaretry_max_retries" ]]; then
      max_retries=${val}
    elif [[ ${opt} == "--condaretry_sleep_interval" ]]; then
      sleep_interval=${val}
    elif [[ ${opt} == "--condaretry_timeout" ]]; then
      LEGATE_CONDA_RETRY_TIMEOUT=${val}
    else
      args="${args} ${arg}"
    fi
  done

  # shellcheck disable=SC2086
  legate_run_conda ${args}

  # Retry loop, only if needed
  while (( LEGATE_NEED_TO_RETRY == 1 )) && \
          (( retries < max_retries )); do

    retries=$(( retries + 1 ))
    legate-echo-stderr "Waiting, retry ${retries} of ${max_retries} -> sleeping for ${sleep_interval} seconds..."
    sleep "${sleep_interval}"
    legate-echo-stderr "Starting, retry ${retries} of ${max_retries} -> sleep done..."

    # shellcheck disable=SC2086
    legate_run_conda ${args}
  done

  return "${LEGATE_EXITCODE}"
}

run_command "${LEGATE_CONDA_EXE:-conda} '$*'" legate_conda_retry_fn "$@"

# Cleanup global variables
unset LEGATE_EXITCODE
unset LEGATE_NEED_TO_RETRY
